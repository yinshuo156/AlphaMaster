# Genetic-Alpha generated factor 1
import numpy as np
import pandas as pd

# 导入Genetic-Alpha的函数
import sys
sys.path.insert(0, str(r'c:\Users\Administrator\Desktop\alpha-master\Genetic-Alpha-main'))
try:
    from functions import *
    from utilities import *
except ImportError:
    # 如果无法导入，提供基础实现
    def sqrt(x):
        return np.sqrt(x)
    
    def ifcondition_e(a, b, c, d):
        """Element-wise if condition"""
        result = np.where(a == b, c, d)
        return result


def calculate_factor(stock_data):
    """Calculate factor based on genetic programming result"""
    # Factor generated by Genetic-Alpha
    # Original expression: sqrt(ifcondition_e(close, volume, low, high))

    # Calculate basic derived features
    stock_data['returns'] = stock_data['close'] / stock_data['close'].shift(1) - 1
    stock_data['range'] = stock_data['high'] - stock_data['low']
    stock_data['hlc3'] = (stock_data['high'] + stock_data['low'] + stock_data['close']) / 3

    # Implement factor calculation based on genetic programming result
    try:
        # 实现表达式: sqrt(ifcondition_e(close, volume, low, high))
        # 条件判断：如果close == volume，取low，否则取high
        condition_result = ifcondition_e(
            stock_data['close'].values,
            stock_data['volume'].values,
            stock_data['low'].values,
            stock_data['high'].values
        )
        factor_value = sqrt(condition_result)
        
        # 转换为Series并处理缺失值
        factor_value = pd.Series(factor_value, index=stock_data.index)
        factor_value = factor_value.replace([np.inf, -np.inf], np.nan)
        return factor_value
    except Exception as e:
        # Fallback calculation if expression execution fails
        print(f'Factor calculation error: {e}')
        return stock_data['returns']  # Default to returns if error occurs
