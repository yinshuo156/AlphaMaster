# Genetic-Alpha generated factor 8
import numpy as np
import pandas as pd

def calculate_factor(stock_data):
    # Factor generated by Genetic-Alpha
    # Original expression: ts_argmin(ifcondition_e(open, ts_count(high, volume, 7.000), add(volume, close), ts_product(low, 9.000)), 8.000)

    # Calculate basic derived features
    stock_data['returns'] = stock_data['close'] / stock_data['close'].shift(1) - 1
    stock_data['range'] = stock_data['high'] - stock_data['low']
    stock_data['hlc3'] = (stock_data['high'] + stock_data['low'] + stock_data['close']) / 3

    # Implement factor calculation based on genetic programming result
    try:
        factor_value = ts_argmin(ifcondition_e(stock_data['open'], ts_count(stock_data['high'], stock_data['volume'], 7.000), +(stock_data['volume'], stock_data['close']), ts_product(stock_data['low'], 9.000)), 8.000)
        # Handle potential NaN and inf values
        factor_value = factor_value.replace([np.inf, -np.inf], np.nan)
        return factor_value
    except Exception as e:
        # Fallback calculation if expression execution fails
        print(f'Factor calculation error: {e}')
        return stock_data['returns']  # Default to returns if error occurs
